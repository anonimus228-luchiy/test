from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db.queries import add_product, get_products, add_order
from config import STAFF, bot

class FSMProduct(StatesGroup):
    name = State()
    category = State()
    size = State()
    price = State()
    article = State()
    photo = State()

async def start_add_product(message: types.Message):
    if str(message.from_user.id) not in STAFF:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await FSMProduct.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

async def load_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMProduct.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")

async def load_product_category(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = message.text
    await FSMProduct.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")

async def load_product_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await FSMProduct.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

async def load_product_price(message: types.Message, state: FSMContext):
    if not message.text.replace('.', '', 1).isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    async with state.proxy() as data:
        data['price'] = float(message.text)
    await FSMProduct.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")

async def load_product_article(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['article'] = message.text
    await FSMProduct.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

async def load_product_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id
        add_product(data['name'], data['category'], data['size'], data['price'], data['article'], data['photo'])
    await state.finish()
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

async def cmd_info(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏.")

async def cmd_products(message: types.Message):
    products = get_products()
    if not products:
        await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "\n".join([f"{p[1]} - {p[4]} —Ä—É–±. (–∞—Ä—Ç. {p[5]})" for p in products])
        await message.answer(text)

class FSMOrder(StatesGroup):
    article = State()
    size = State()
    quantity = State()
    contact = State()

async def start_order(message: types.Message):
    await FSMOrder.article.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:")

async def load_article(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['article'] = message.text
    await FSMOrder.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")

async def load_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await FSMOrder.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")

async def load_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    async with state.proxy() as data:
        data['quantity'] = int(message.text)
    await FSMOrder.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")

async def load_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text

        print("üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        add_order(data['article'], data['size'], data['quantity'], data['contact'])

        order_info = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
                      f"–ê—Ä—Ç–∏–∫—É–ª: {data.get('article', '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                      f"–†–∞–∑–º–µ—Ä: {data.get('size', '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                      f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity', '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                      f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact', '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

        print("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:", order_info)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    if not STAFF:
        print("‚ùå –û—à–∏–±–∫–∞: STAFF –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å config.py")
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return

    for staff_id in STAFF:
        try:
            staff_id = str(staff_id).strip()  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ
            if staff_id.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ID
                await bot.send_message(chat_id=int(staff_id), text=order_info)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {staff_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {staff_id}: {e}")

    await state.finish()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start")
    dp.register_message_handler(cmd_info, commands="info")
    dp.register_message_handler(cmd_products, commands="products")
    dp.register_message_handler(start_order, commands="order", state=None)
    dp.register_message_handler(load_article, state=FSMOrder.article)
    dp.register_message_handler(load_size, state=FSMOrder.size)
    dp.register_message_handler(load_quantity, state=FSMOrder.quantity)
    dp.register_message_handler(load_contact, state=FSMOrder.contact)
    dp.register_message_handler(start_add_product, commands="add_product", state=None)
    dp.register_message_handler(load_product_name, state=FSMProduct.name)
    dp.register_message_handler(load_product_category, state=FSMProduct.category)
    dp.register_message_handler(load_product_size, state=FSMProduct.size)
    dp.register_message_handler(load_product_price, state=FSMProduct.price)
    dp.register_message_handler(load_product_article, state=FSMProduct.article)
    dp.register_message_handler(load_product_photo, state=FSMProduct.photo, content_types=['photo'])
